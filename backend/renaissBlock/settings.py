"""
Django settings for renaissBlock project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # For environment variables and paths (PEP 8 compliant)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from backend/.env if present
try:
    from dotenv import load_dotenv  # type: ignore
    load_dotenv(BASE_DIR / '.env')
except Exception:
    pass

# Ensure Django looks for project-level templates (e.g., themed allauth pages)
try:
    TEMPLATES[0]['DIRS'] = [BASE_DIR / 'templates']
except Exception:
    pass

# Template overrides (ensure project-level templates are used)
try:
    import os as _os
    TEMPLATES[0]['DIRS'] = [str(BASE_DIR / 'templates')]
    TEMPLATES[0]['APP_DIRS'] = True
except Exception:
    pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'  # Change this in production; never store in repo (per GUIDELINES.md Security Focus)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rb_core',  # Custom app for core functionality (avoids conflict with Python's 'core' module)
    'rest_framework',  # For building APIs (e.g., content upload FR4, fiat callbacks FR2)
    'allauth',
    'allauth.account',
    'corsheaders',
    # Future: Add apps for integrations like 'rest_framework' for APIs (FR2, FR4 in REQUIREMENTS.md)
]

# Use custom user model from rb_core for auth (FR3)
AUTH_USER_MODEL = 'rb_core.User'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'rb_core.middleware.SimpleCSPMiddleware',
]

ROOT_URLCONF = 'renaissBlock.urls'

# Template configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR / 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'renaissBlock.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Using SQLite for MVP to avoid costs (per SCOPE.md constraints); switch to Postgres later (ARCHITECTURE.md)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),  # Local file-based DB
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Security Settings (per GUIDELINES.md)
SECURE_SSL_REDIRECT = False  # Enable in production for HTTPS (TLS 1.3+)
SECURE_HSTS_SECONDS = 0  # Enable HSTS in production
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
# CSP: To be configured for XSS protection
# Basic defaults for MVP; adjust per asset/CDN usage
CSP_DEFAULT_SRC = "'self'"
CSP_IMG_SRC = "'self' data: https://picsum.photos https://ipfs.io"
CSP_SCRIPT_SRC = "'self' 'unsafe-inline'"
CSP_STYLE_SRC = "'self' 'unsafe-inline'"
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
# No private key storage - rely on Web3Auth (FR3 in REQUIREMENTS.md)

# Placeholder for Integrations (per ARCHITECTURE.md)
# WEB3AUTH_CLIENT_ID = os.getenv('WEB3AUTH_CLIENT_ID')  # Set in env for keyless auth
# RAMP_API_KEY = os.getenv('RAMP_API_KEY')  # For fiat-to-crypto (FR2)
IPFS_API_URL = 'https://ipfs.infura.io:5001'  # Free tier for MVP (FR4)

# Future Expansion: Add moderation queue, analytics (FR7), collaboration logic (FR8)
# Ensure compliance with regulations (e.g., GDPR minimization) - no unnecessary data storage

WEB3AUTH_CLIENT_ID = os.getenv('WEB3AUTH_CLIENT_ID', 'your_client_id_here')  # For keyless wallet auth (FR3)
# Prefer the auth domain JWKS for Sapphire (supports ES256)
WEB3AUTH_JWKS_URL = os.getenv('WEB3AUTH_JWKS_URL', 'https://api-auth.web3auth.io/.well-known/jwks.json')

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

# django-allauth v65 settings using ACCOUNT_LOGIN_METHODS / ACCOUNT_SIGNUP_FIELDS
ACCOUNT_LOGIN_METHODS = { 'username': True }
ACCOUNT_SIGNUP_FIELDS = ['username*', 'password1*', 'password2*']
# Ensure no other legacy flags present
try:
    del ACCOUNT_AUTHENTICATION_METHOD
    del ACCOUNT_USERNAME_REQUIRED
    del ACCOUNT_EMAIL_REQUIRED
except Exception:
    pass
ACCOUNT_EMAIL_VERIFICATION = 'none'
FRONTEND_ORIGIN = 'http://localhost:3000'
LOGIN_REDIRECT_URL = f'{FRONTEND_ORIGIN}/'
LOGOUT_REDIRECT_URL = f'{FRONTEND_ORIGIN}/'

# CORS/CSRF for frontend
CORS_ALLOWED_ORIGINS = [
  "http://localhost:3000",
  "http://127.0.0.1:3000",
]
CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = [
  "http://localhost:3000",
  "http://127.0.0.1:3000",
]

"""Feature flags and blockchain config

Read from environment with safe defaults for MVP (SQLite). For security, do not
store private keys in the repo. Only public identifiers (program ID, pubkeys)
may be given a default here per GUIDELINES.md.
"""
FEATURE_ANCHOR_MINT = os.getenv('FEATURE_ANCHOR_MINT', 'false').lower() in ('1', 'true', 'yes', 'on')
ANCHOR_PROGRAM_ID = os.getenv('ANCHOR_PROGRAM_ID', '9ZACvfz6GNqa7fvtXTbsWUKjgzHUeJwxg4qiG8oRB7eH')
SOLANA_RPC_URL = os.getenv('SOLANA_RPC_URL', 'https://api.devnet.solana.com')
PLATFORM_WALLET_PUBKEY = os.getenv('PLATFORM_WALLET_PUBKEY', '')
# Optional: dev-only keypair path for platform wallet signer on devnet
PLATFORM_WALLET_KEYPAIR_PATH = os.getenv('PLATFORM_WALLET_KEYPAIR_PATH', '')

# DRF throttling for public endpoints
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '60/min',
        'user': '120/min',
    },
}

# Upload constraints (bytes and MIME types)
MAX_UPLOAD_BYTES = int(os.getenv('MAX_UPLOAD_BYTES', str(10 * 1024 * 1024)))  # 10 MB
ALLOWED_UPLOAD_CONTENT_TYPES = set((
    'image/jpeg', 'image/png', 'image/webp',
    'application/pdf',
    'video/mp4',
))

## Duplicate guard: the above variables are defined once; keep this footer clean.
